<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <properties url="file:${mybatis.generator.properties}"/>
    <classPathEntry location="${jdbc.driverClass}"/>

    <context id="Mysql" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 自动生成toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 自动生成equals方法和hashcode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>

        <commentGenerator>
            <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
            <property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>
            <!-- 去掉所有的注解 -->
            <property name="suppressAllComments" value="true"></property>
            <!-- 去掉生成日期注释 -->
            <property name="suppressDate" value="true"></property>
            <!-- 生成的Java文件的编码 -->
            <property name="javaFileEncoding" value="utf-8"/>
            <!-- 格式化java代码 -->
            <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
            <!-- 格式化XML代码 -->
            <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        </commentGenerator>

        <!-- 必须要有的，使用这个配置链接数据库 -->
        <jdbcConnection driverClass="${jdbc.driverClassName}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
            <!--当useJSR310Types为true时，就会jdbc对应的日期类型会转成java8中的LocateDateTime类型，如果useJSR310Types为false，则还是转成java.util.Date类型-->
            <property name="useJSR310Types" value="true"/>
        </javaTypeResolver>

        <javaModelGenerator targetPackage="${package.model}" targetProject="${package.model.path}">
            <!--  for MyBatis3/MyBatis3Simple:自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；-->
            <property name="constructorBased" value="false"/>
            <!-- for MyBatis3 / MyBatis3Simple:是否创建一个不可变的类，如果为true，那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类-->
            <property name="immutable" value="false"/>
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"></property>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"></property>
        </javaModelGenerator>

        <sqlMapGenerator targetPackage="${package.xml}" targetProject="${package.xml.path}">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"></property>
        </sqlMapGenerator>

        <javaClientGenerator type="XMLMAPPER" targetPackage="${package.mapper}" targetProject="${package.mapper.path}">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <table schema="msg_tb" tableName="msg_tb" domainObjectName="Msg" enableSelectByPrimaryKey="true" enableDeleteByExample="false">
            <property name="constructorBased" value="false"/>
            <property name="ignoreQualifiersAtRuntime" value="false"/>
            <property name="immutable" value="false"/>
            <property name="modelOnly" value="false"/>
            <generatedKey column="code" sqlStatement="MySql" identity="true"/>
        </table>
    </context>
</generatorConfiguration>